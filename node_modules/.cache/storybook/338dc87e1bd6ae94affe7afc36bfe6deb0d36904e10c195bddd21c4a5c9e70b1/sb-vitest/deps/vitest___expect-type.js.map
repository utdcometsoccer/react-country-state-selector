{
  "version": 3,
  "sources": ["../../../../../expect-type/dist/branding.js", "../../../../../expect-type/dist/messages.js", "../../../../../expect-type/dist/overloads.js", "../../../../../expect-type/dist/utils.js", "../../../../../expect-type/dist/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\nconst inverted = Symbol('inverted');\n/**\n * @internal\n */\nconst expectNull = Symbol('expectNull');\n/**\n * @internal\n */\nconst expectUndefined = Symbol('expectUndefined');\n/**\n * @internal\n */\nconst expectNumber = Symbol('expectNumber');\n/**\n * @internal\n */\nconst expectString = Symbol('expectString');\n/**\n * @internal\n */\nconst expectBoolean = Symbol('expectBoolean');\n/**\n * @internal\n */\nconst expectVoid = Symbol('expectVoid');\n/**\n * @internal\n */\nconst expectFunction = Symbol('expectFunction');\n/**\n * @internal\n */\nconst expectObject = Symbol('expectObject');\n/**\n * @internal\n */\nconst expectArray = Symbol('expectArray');\n/**\n * @internal\n */\nconst expectSymbol = Symbol('expectSymbol');\n/**\n * @internal\n */\nconst expectAny = Symbol('expectAny');\n/**\n * @internal\n */\nconst expectUnknown = Symbol('expectUnknown');\n/**\n * @internal\n */\nconst expectNever = Symbol('expectNever');\n/**\n * @internal\n */\nconst expectNullable = Symbol('expectNullable');\n/**\n * @internal\n */\nconst expectBigInt = Symbol('expectBigInt');\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\nconst secret = Symbol('secret');\n/**\n * @internal\n */\nconst mismatch = Symbol('mismatch');\n/**\n * A type which should match anything passed as a value but *doesn't*\n * match {@linkcode Mismatch}. It helps TypeScript select the right overload\n * for {@linkcode PositiveExpectTypeOf.toEqualTypeOf | .toEqualTypeOf()} and\n * {@linkcode PositiveExpectTypeOf.toMatchTypeOf | .toMatchTypeOf()}.\n *\n * @internal\n */\nconst avalue = Symbol('avalue');\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expectTypeOf = void 0;\n__exportStar(require(\"./branding\"), exports); // backcompat, consider removing in next major version\n__exportStar(require(\"./messages\"), exports); // backcompat, consider removing in next major version\n__exportStar(require(\"./overloads\"), exports);\n__exportStar(require(\"./utils\"), exports); // backcompat, consider removing in next major version\nconst fn = () => true;\n/**\n * Similar to Jest's `expect`, but with type-awareness.\n * Gives you access to a number of type-matchers that let you make assertions about the\n * form of a reference or generic type parameter.\n *\n * @example\n * ```ts\n * import { foo, bar } from '../foo'\n * import { expectTypeOf } from 'expect-type'\n *\n * test('foo types', () => {\n *   // make sure `foo` has type { a: number }\n *   expectTypeOf(foo).toMatchTypeOf({ a: 1 })\n *   expectTypeOf(foo).toHaveProperty('a').toBeNumber()\n *\n *   // make sure `bar` is a function taking a string:\n *   expectTypeOf(bar).parameter(0).toBeString()\n *   expectTypeOf(bar).returns.not.toBeAny()\n * })\n * ```\n *\n * @description\n * See the [full docs](https://npmjs.com/package/expect-type#documentation) for lots more examples.\n */\nconst expectTypeOf = (_actual) => {\n    const nonFunctionProperties = [\n        'parameters',\n        'returns',\n        'resolves',\n        'not',\n        'items',\n        'constructorParameters',\n        'thisParameter',\n        'instance',\n        'guards',\n        'asserts',\n        'branded',\n    ];\n    const obj = {\n        /* eslint-disable @typescript-eslint/no-unsafe-assignment */\n        toBeAny: fn,\n        toBeUnknown: fn,\n        toBeNever: fn,\n        toBeFunction: fn,\n        toBeObject: fn,\n        toBeArray: fn,\n        toBeString: fn,\n        toBeNumber: fn,\n        toBeBoolean: fn,\n        toBeVoid: fn,\n        toBeSymbol: fn,\n        toBeNull: fn,\n        toBeUndefined: fn,\n        toBeNullable: fn,\n        toBeBigInt: fn,\n        toMatchTypeOf: fn,\n        toEqualTypeOf: fn,\n        toBeConstructibleWith: fn,\n        toMatchObjectType: fn,\n        toExtend: fn,\n        map: exports.expectTypeOf,\n        toBeCallableWith: exports.expectTypeOf,\n        extract: exports.expectTypeOf,\n        exclude: exports.expectTypeOf,\n        pick: exports.expectTypeOf,\n        omit: exports.expectTypeOf,\n        toHaveProperty: exports.expectTypeOf,\n        parameter: exports.expectTypeOf,\n    };\n    const getterProperties = nonFunctionProperties;\n    getterProperties.forEach((prop) => Object.defineProperty(obj, prop, { get: () => (0, exports.expectTypeOf)({}) }));\n    return obj;\n};\nexports.expectTypeOf = expectTypeOf;\n"],
  "mappings": "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",
  "names": ["exports"]
}
